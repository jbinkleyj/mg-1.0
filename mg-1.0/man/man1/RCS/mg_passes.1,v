head	1.5;
access;
symbols;
locks
	beebe:1.5; strict;
comment	@# @;


1.5
date	94.05.16.07.09.54;	author beebe;	state Exp;
branches;
next	1.4;

1.4
date	94.05.16.05.26.46;	author beebe;	state Exp;
branches;
next	1.3;

1.3
date	94.05.15.22.20.53;	author beebe;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.01.09.31;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.01.08.43;	author beebe;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@.TH mg_passes 1 "15 May 1994"
.SH NAME
mg_passes \- builds mg data basses
.SH SYNOPSIS
.B mg_passes
[
.B \-h
]
[
.B \-G
]
[
.B \-S
]
[
.B \-D
]
[
.B \-W
]
.if n .ti +9n
[
.BR \-1 " |"
.BR \-2 " |"
.B  \-3
]
[
.BI \-C " compstatpoint"
]
.if n .ti +9n
[
.BI \-n " tracename"
]
.if t .ti +.5i
[
.BI \-b " bufsize"
]
[
.BI \-m " memlimit"
]
.if n .ti +9n
[
.BI \-c " numchunks"
]
[
.BI \-s " stemmethod"
]
[
.BI \-t " tracepos"
]
.if n .ti +9n
[
.B \-T1
]
[
.B \-T2
]
.if t .ti +.5i
[
.B \-I1
]
[
.B \-I2
]
[
.B \-N1
]
[
.B \-N2
]
.if n .ti +9n
[
.BI \-d " directory"
]
.BI \-f " name"
[
.I filename(s)
]
.SH DESCRIPTION
.B mg_passes
is the program that does most of the work when building
.BR mg (1)
database systems.  The input documents can come from either
.I stdin
or from a list of files on the command line.  Individual documents
must be separated with control-B characters.  In general,
.B mg_passes
must be run twice to build a database, first with the
.B \-T1
and
.B \-N1
options, and second with the
.B \-T2
and
.B \-N2
options.  Several other programs must be run in order to get an
.BR mg (1)
database that is ready for the
.BR mgquery (1)
program.  The
.SB EXAMPLE
section below gives an example of how to build a complete
.BR mg (1)
database.
.SH OPTIONS
Options may appear in any order, but the
.IR filename(s) ,
if specified, must be last.
.TP "\w'\fB\-C\fP \fIcompstatpoint\fP'u+2n"
.B \-h
This displays a usage line on
.IR stderr .
.TP
.B \-G
Treat SGML tags as non-words when building the inverted file.  An SGML
tag is anything between angle brackets, i.e., `<' and `>'.
.TP
.B \-S
This option causes a special pass to be executed.  It is up to a user
to modify
.I mg.special.c
in the source code to do something with the documents it is given.
.TP
.B \-D
If
.B mg_passes
fails, then print the document that caused the failure to the trace
file if tracing is active, or to
.I stderr
if it is not.
.TP
.B \-W
This option enables the generation of the weights file when
.B \-N2
is specified.  It causes
.B \-N2
to use a little more memory and CPU.
.TP
.B \-1
Produce a level-1 inverted file.  This option is only useful when
specified with either
.BR "\-I1 " "or "\-N1 .
A level-1 inverted file makes it possible for
.BR mgquery (1)
to do Boolean queries.  Ranked queries can still be done,
although the quality of the ranking is abysmal.
.TP
.B \-2
Produce a level-2 inverted file.  This option is only useful when
specified with either
.BR "\-I1 " "or "\-N1 .
This is the default when neither
.BR \-1 ", " "\-2 " "or " \-3
is specified.
A level-2 inverted file makes it possible for
.BR mgquery (1)
to do Boolean queries and cosine-ranked queries.
.TP
.B \-3
Produce a level-3 inverted file.  This option is only useful when
specified with either
.BR "\-I1 " "or "\-N1 .
This has been implemented to enable paragraph-level inversion.
Paragraphs are delimited by control-C characters in the source text.
.TP
.BI \-C " compstatpoint"
This option causes statistics on the compression performance to be
output to a file called
.IR *.compression.stats .
.I compstatpoint
specifies the interval between outputting each line of statistics.  The
units of
.I compstatpoint
are kilobytes of source text.  E.g., if
.I compstatpoint
is 10, then a line is output to the file every 10 KB of input
source.  Each line of the file consists of 4 numbers The first number
is the amount of input text, in bytes, processed so far.  The second
number is the amount of input text, in bytes, processed since the
last line was output to the file.  The third number is the number of
output bytes generated since the last line was output to the file, and
the fourth number is the compression achieved since the last line was
output, i.e., the third number divided by the second number.
.TP
.BI \-n " tracename"
This specifies the filename to use for the trace log, if tracing is
enabled using the
.B \-t
option.  If
.BI \-n " tracename"
is not given and tracing is enabled, a default trace filename will be
used.
.TP
.BI \-s " stemmethod"
This specifies the method to use to \*(lqstem\*(rq the words in the
inverted file dictionary.  This is a bit mask specifying the
operations to do on words as they are parsed out of the text, where
bit number 0 is the low-order (rightmost) bit.  Bit 0 does case
folding, and bit 1 does simple stemming, so the value 3 for
.I stemmethod
does both case folding and stemming.
.TP
.BI \-b " bufsize"
Specify the size of the document buffer in kilobytes.  If any document
is larger than
.IR bufsize ,
the program will abort with an error message.  This should probably be
replaced with some system which automatically increases the buffer
size as required.  The default size is 3072 KB (3 MB).
.TP
.BI \-m " memlimit"
Maximum amount of memory to use for the pass-2 file inversion in
megabytes.  This option is only useful when used in conjunction with
the option
.BR \-N1 .
The larger this value, the faster the pass-2 inversion will proceed.
The default value is 5 MB.
.TP
.BI \-c " numchunks"
The maximum number of inversion chunks to write to disk.  Each chunk
will be approximately as large as
.IR memlimit .
This option is only useful when used in conjunction with the option
.BR \-N2 .
The larger this value, the faster the pass-2 inversion will proceed.
The default value is 5 MB.
.TP
.BI \-t " tracepos"
This option activates tracing.  A line will be generated in the
trace file for every
.I tracepos
input bytes processed.  The default name for the trace file can be
overridden using the
.BI \-n " tracename"
option.
.TP
.B \-T1
Generate the
.I *.text.stats
file.
.TP
.B \-T2
Generate the
.IR *.text ,
.IR *.text.idx ,
and possibly the
.I *.text.dict.aux
files.  Using this option requires that the
.I *.text.dict
file be present.
.TP
.B \-I1
Generate the
.I *.invf.dict
file.
.TP
.B \-I2
Generate the
.IR *.invf ,
.I *.invf.idx
and
.I *.weight
files.  Using this option
requires that the
.I *.invf.dict.build
file be present.
.TP
.B \-N1
Generate the
.IR *.invf.dict ,
.IR *.invf.chunk ,
and
.I *.invf.chunk.trans
files.
.TP
.B \-N2
Generate the
.I *.invf
and
.I *.invf.idx
files.  Using this option requires
that the
.IR *.invf.dict.hash ,
.IR *.invf.chunk ,
and
.I *.invf.chunk.trans
files
be present.  The
.I *.invf.dict.hash
file is generated by
.BR mg_perf_hash_build (1)
from the
.I *.invf.dict.build
file.  If the
.B \-W
option is specified, the
.I *.weight
file will also be generated.
.TP
.BI \-d " directory"
This specifies the directory where the document collection is to be
written.
.TP
.BI \-f " name"
This specifies the base name of the document collection that will be
created.
.TP
.I filename(s)
This specifies the source text. If this is not specified, then the
program expects the source text from
.IR stdin .
.SH EXAMPLE
What follows is a UNIX
.BR csh (1)
script as an example of how to build an
.BR mg (1)
document collection.
.LP
.nf
.DT
.ft B
.I #! /bin/csh
.I
# The first argument on the command line specifies the
.I
#   source of the text
set source = ($1)
.PP
.I
# The second argument is the name of the collection
set text = ($2)
.PP
.I
# Create *.text.stats,  *.invf.dict.build,
.I
#   *.invf.chunk and *.invf.chunks.trans
${source} | mg_passes -T1 -N1 -m 1 -t 1 -f ${text}
.PP
.I
# Create *.text.dict
mg_compression_dict -f ${text}
.PP
.I
# Create *.invf.dict.hash
mg_perf_hash_build -f ${text}
.PP
.I
# Create *.text,  *.text.idx,
.I
#   *.invf and *.invf.idx
${source} | mg_passes -T2 -N2 -c 2 -t 1 -f ${text}
.PP
.I
# Create *.text.idx.wgt and *.weight.approx
mg_weights_build -f ${text} -b 8
.PP
.I
# Create *.invf.dict
mg_invf_dict -f ${text} -b 4096
.PP
.I
# Create *.text.dict
mg_fast_comp_dict -f ${text}
.ft R
.fi
.SH ENVIRONMENT
.TP "\w'\fBMGDATA\fP'u+2n"
.SB MGDATA
If this environment variable exists, then its value is used as the
default directory where the
.BR mg (1)
collection files are.  If this variable does not exist, then the
directory \*(lq\fB.\fP\*(rq is used by default.  The command line
option
.BI \-d " directory"
overrides the directory in
.BR MGDATA .
.SH FILES
.TP 20
.B *.invf
Inverted file.
.TP
.B *.invf.chunk
Inverted file chunk descriptor file.  When the inverted file is
created it is created in chunks that use no more than a set amount of
memory.  This file describes those chunks.
.TP
.B *.invf.chunk.trans
Word-occurrence-order to lexical-order translation file.  The
.B *.invf.chunk
file is written in word-occurrence order but is required by
.B \-N2
to be in lexical order.
.TP
.B *.invf.dict.build
Compressed stemmed dictionary.
.TP
.B *.invf.dict.hash
Data for an order-preserving perfect hash function.
.TP
.B *.invf.idx
The index into the inverted file.
.TP
.B *.weight
The exact weights file.
.TP
.B *.text
Compressed documents.
.TP
.B *.text.stats
Statistics about the text.
.TP
.B *.text.dict
Compressed compression dictionary.
.TP
.B *.text.idx
Index into the compressed documents.
.TP
.B *.trace
The default trace file.
.TP
.B *.compression.stats
Statistics about the compression of the text.
.SH "SEE ALSO"
.na
.BR mg (1),
.BR mg_compression_dict (1),
.BR mg_fast_comp_dict (1),
.BR mg_get (1),
.BR mg_invf_dict (1),
.BR mg_invf_dump (1),
.BR mg_invf_rebuild (1),
.BR mg_perf_hash_build (1),
.BR mg_text_estimate (1),
.BR mg_weights_build (1),
.BR mgbilevel (1),
.BR mgbuild (1),
.BR mgdictlist (1),
.BR mgfelics (1),
.BR mgquery (1),
.BR mgstat (1),
.BR mgtic (1),
.BR mgticbuild (1),
.BR mgticdump (1),
.BR mgticprune (1),
.BR mgticstat (1).
@


1.4
log
@*** empty log message ***
@
text
@d6 24
a29 12
.RB [ \-h ]
.RB [ \-G ]
.RB [ \-S ]
.RB [ \-D ]
.RB [ \-W ]
.RB [ \-1 " | " \-2 " | " \-3]
.RB [ \-C
.IR compstatpoint ]
.RB [ \-n
.IR tracename ]
.RB [ \-b
.IR bufsize ]
d31 3
d35 16
a50 12
.RB [ \-m
.IR memlimit ]
.RB [ \-c
.IR numchunks ]
.RB [ \-s
.IR stemmethod ]
.RB [ \-t
.IR tracepos ]
.RB [ \-T1 ]
.RB [ \-T2 ]
.RB [ \-I1 ]
.RB [ \-I2 ]
d52 6
d59 16
a74 4
.RB [ \-N1 ]
.RB [ \-N2 ]
.RB [ \-d
.IR directory ]
d76 3
a78 1
.RI [ filename(s) ]
a108 1
.PP
d425 1
@


1.3
log
@*** empty log message ***
@
text
@d61 1
a61 1
program.  The 
@


1.2
log
@Reformat excessively long line.
@
text
@d1 1
a1 1
.TH mg_passes 1 "2 February 1994"
a4 1

a5 1

d11 2
a12 2
.RB [ \-1 | \-2 | \-3\fP]
.RB [ \-C 
d14 1
a14 1
.RB [ \-n 
d16 1
a16 1
.RB [ \-b 
d18 3
a20 1
.RB [ \-m 
d22 1
a22 1
.RB [ \-c 
d24 1
a24 1
.RB [ \-s 
d32 2
d36 1
a36 1
.RB [ \-d 
a40 1
.LP
d43 8
a50 5
.B MG
database systems. The input documents can come from either stdin or from a list
of files on the command line. Individual documents must be separated
with ^B's. In general it must be run twice to build a database, first with the
.B -T1
d52 1
a52 1
.B -N1
d54 5
a58 5
.B -T2
and 
.B -N2
options. Several other program must be run in order to get a
.B MG
d60 6
a65 4
.B mgquery
program. The EXAMPLE section gives an example of how to build a complete 
.B MG
database. 
d67 5
a71 6
.LP
Options may appear in any order, but the 
.IR filename(s) , 
if it is specified must be last.
.RS
.TP
d73 2
a74 1
This displays a usage line on the screen.
d77 2
a78 1
Treat SGML tags as non-words when building the inverted file. An SGML tag is anything between angle brackets i.e. '<' and '>'.
d81 4
a84 3
This option causes a special pass to be executed. It is up to a user to modify 
.B mg.special.c 
to do something with the documents it is given.
d87 6
a92 3
If 
.B mg_passes 
fails then print the document that caused the failure to the trace file if tracing is active, or to stderr if it is not.
d95 5
a99 2
This option enables the generation of the weights file when -N2 is specified.
It causes -N2 to use a little more memory and CPU.
d102 2
a103 2
Produce a level 1 inverted file. This option is only useful when specified 
with either 
d105 4
a108 4
A level 1 inverted file makes it possible for 
.B mgquery
to do boolean queries. Ranked queries can still be done 
although the quality of the ranking it abysmal.
d111 2
a112 2
Produce a level 2 inverted file. This option is only useful when specified 
with either 
d117 3
a119 3
A level 2 inverted file makes it possible for 
.B mgquery
to do boolean queries and cosine ranked queries.
d122 2
a123 2
Produce a level 3 inverted file. This option is only useful when specified 
with either 
d125 2
a126 2
This has been implemented to enable paragraph level inversion.
Paragraphs are delimited by ^C's in the source text.
d129 3
a131 2
This option causes statistics on the compression performance to be output to a file called
.BR *.compression.stats .
d133 2
a134 1
specifies the interval between outputting each line of statistics. The units of 
d136 1
a136 1
is kilobytes of source text. E.g. If
d138 5
a142 5
is 10 then a line is output to the file every 10 Kb of input
source. Each line of the file consists of 4 numbers The first number
is the amount of input text, in bytes, processed so far. The second
number is the amounts of input text, in bytes, processed since the
last line was output to the file. The Third number is the number of
d145 1
a145 1
output, i.e. the third number divided by the second number.
d148 2
a149 1
This specifies the filename to use for the trace log, if tracing is enabled using the
d151 1
a151 1
option. If 
d153 2
a154 1
is not given and tracing is enabled a default trace filename will be used.
d157 7
a163 1
This specifies the method to use to \*(lqstem\*(rq the words in the inverted file dictionary. This is a bit mask specifying the operations to do on words as they are parsed out of the text. Bit 0 does case folding. Bit 1 does simple stemming. e.g. the value 3 does case folding and stemming.
d166 6
a171 6
Specify the size of the document buffer in kilobytes. If any document is 
larger than
.I bufsize
the program will abort with an error message. This should probably be replaced
with some system which automatically increases the buffer size as required. 
The default size is 3072 Kb (3 Mb).
d174 6
a179 4
Maximum amount of memory to use for the pass2 file inversion in megabytes. This option is only useful when used in conjunction with the option
.B \-N1.
The larger this value the faster the pass2 inversion will proceed.
The default value for this is 5 Mb.
d182 3
a184 2
The maximum number of inversion chunks to write to disk. Each chunk will be approximately as large as the 
.I memlimit
d186 3
a188 3
.B \-N2.
The larger this value the faster the pass2 inversion will proceed.
The default value for this is 5 Mb.
d191 2
a192 2
This option activates tracing. A line will be generated in the 
trace file for every 
d194 2
a195 1
input bytes processed. The default name for the trace file can be overridden using the
d199 38
a236 2
.B -T1 
Generate the *.text.stats file. 
d238 23
a260 20
.B -T2
Generate the *.text, *.text.idx, and possibly the *.text.dict.aux files. Using this option requires that the *.text.dict file be present.
.TP
.B -I1
Generate the *.invf.dict file.
.TP
.B -I2
Generate the *.invf, *.invf.idx and *.weight files. Using this option 
requires that the *.invf.dict.build file be present.
.TP
.B -N1
Generate the *.invf.dict, *.invf.chunk and *.invf.chunk.trans files.
.TP
.B -N2
Generate the *.invf and *.invf.idx files. Using this option requires that the
*.invf.dict.hash, *.invf.chunk and *.invf.chunk.trans files be present. The
*.invf.dict.hash file is generated by
.B mg_perf_hash_build
from the *.invf.dict.build file. If the -W option is specified the
*.weight file will also be generated.
d263 2
a264 1
This specifies the directory where the document collection is to written.
d267 2
a268 1
This specifies the base name of the document collection that will be created.
d271 3
a273 2
This specifies the source text, If this is not specified then the program 
expects the source text from stdin.
d275 5
a279 1
What follows is an example of how to build a mg document collection.
a284 3

.I 
# The first argument on the command line specifies the 
d286 2
d290 1
a290 1

d294 1
a294 1

d296 1
a296 1
# Create *.text.stats,  *.invf.dict.build,  
d298 1
a298 1
#   *.invf.chunk and *.invf.chunks.trans 
d300 1
a300 1

d303 2
a304 2
mg_compression_dict -f ${text} 

d307 2
a308 2
mg_perf_hash_build -f ${text} 

d310 1
a310 1
# Create *.text,  *.text.idx,  
d312 1
a312 1
#   *.invf and *.invf.idx 
d314 2
a315 2

.I 
d318 1
a318 1

d322 2
a323 2

.I 
d325 1
a325 1
mg_make_fast_dict -f ${text}
d329 1
a329 1
.TP
d331 6
a336 4
If this environment variable exists then its value is used a the default 
directory where the mg collection files should be written. If this variable
does not exist then the directory \*(lq\fB.\fP\*(rq is used by default. The 
command line option 
d338 1
a338 1
overrides the directory in 
a340 1
.PD 0
d343 1
a343 1
Inverted file
d346 3
a348 1
Inverted file chunk descriptor file. When the inverted file is created it is created in chunks that use no more that a set amount of memory. This file describes those chunks.
d351 1
a351 1
Word occurrence order to lexical order translation file. The
d353 1
a353 1
file is written in word occurrence order but is required by 
d361 1
a361 1
Data for a order preserving perfect hash function.
d385 1
a385 2
Stats about the compression of the text.

d387 1
a387 1
.LP
d389 1
a393 1
.BR mg_make_fast_dict (1),
d407 1
a407 1
.BR mgticstat (1)
@


1.1
log
@Initial revision
@
text
@d122 8
a129 1
is 10 then a line is output to the file every 10 Kb of input source. Each line of the file consists of 4 numbers The first number is the amount of input text, in bytes, processed so far. The second number is the amounts of input text, in bytes, processed since the last line was output to the file. The Third number is the number of output bytes generated since the last line was output to the file, and the fourth number is the compression achieved since the last line was output, i.e. the third number divided by the second number.
@
