head	1.5;
access;
symbols;
locks
	beebe:1.5; strict;
comment	@# @;


1.5
date	94.05.16.07.09.54;	author beebe;	state Exp;
branches;
next	1.4;

1.4
date	94.05.16.05.26.46;	author beebe;	state Exp;
branches;
next	1.3;

1.3
date	94.05.15.22.20.53;	author beebe;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.01.23.29;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.01.21.06;	author beebe;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@.TH mg_compression_dict 1 "15 May 1994"
.SH NAME
mg_compression_dict \- build a compression dictionary.
.SH SYNOPSIS
.B mg_compression_dict
[
.B \-h
]
[
.BR \-C " |"
.BR \-P " |"
.B  \-S
]
.if n .ti +9n
[
.BR \-0 " |"
.BR \-1 " |"
.BR \-2 " |"
.B  \-3
]
[
.BR \-H " |"
.BR \-B " |"
.BR \-D " |"
.BR \-Y " |"
.B  \-M
]
.if n .ti +9n
.if t .ti +.5i
[
.BI \-l " lookback"
]
[
.BI \-k " mem"
]
[
.BI \-d " directory"
]
.BI \-f " name"
.SH DESCRIPTION
.B mg_compression_dict
builds a compression dictionary based on the statistics gathered
during the first pass over the text.  The options to the program are
mainly concerned with limiting the amount of memory the dictionary
will use and with how the text compressor will cope with any novel
words found during the compression phase.
.SH OPTIONS
Options may appear in any order.
.TP "\w'\fB\-d\fP \fIdirectory\fP'u+2n"
.B \-h
This displays a usage line on
.IR stdout .
.TP
.B \-C
Build a complete dictionary from the statistics file.  If during the
text compression phase a novel word is found, then the compressor will
produce an error message and stop.
.TP
.B \-P
Build a partial dictionary from the statistics file.  This dictionary
assumes that the statistics file are based on the entire text.  The
statistics of words not includes in the dictionary are used to
calculate the escape probability.  If novel words are being coded
character by character, then there may not be a Huffman code for every
possible character.  This means that the compressor may fail if a novel
word contains a novel character.
.TP
.B \-S
Build a seed dictionary from the statistics file.  This dictionary
assumes that the statistics file is based on only a portion of the
text to be compressed.  The probability of a novel word is based on the
number of words that have only occurred once.  If novel words are being
coded character by character, then the Huffman codes for characters are
based on the frequency of characters in the dictionary.
.TP
.B \-0
All words from the statistics file are included in the built
dictionary.
.TP
.B \-1
Words are included in the dictionary until the dictionary reaches the
desired size.  Words are selected for the dictionary based on the order
they occurred in the source text.
.TP
.B \-2
Words are included in the dictionary until the dictionary reaches the
desired size.  The most frequent words are included in the dictionary
first; where there is a tie for frequency, the shortest word is
included first.
.TP
.B \-3
Words are included in the dictionary until the dictionary reaches the
desired size.  The most frequent words are included in the dictionary
first; where there is a tie for frequency, the shortest word is
included first.  Words are the shuffled back and forth between the
`keep' and `discard' lists to find the `optimal' set of words that
should be in the dictionary.
.TP
.B \-H
This specifies that novel words will be coded character by character
using Huffman codes.
.TP
.B \-B
This specifies that an auxiliary dictionary will be built by the
compressor.  Each novel word found will be placed at the end of the
auxiliary dictionary.  Novel words will be coded in the compressed text
using binary codes.  The binary code represents their occurrence
position in the auxiliary dictionary.
.TP
.B \-D
This specifies that an auxiliary dictionary will be built by the
compressor.  Each novel word found will be placed at the end of the
auxiliary dictionary.  Novel words will be coded in the compressed text
using delta codes.  The delta code represents their occurrence position
in the auxiliary dictionary.
.TP
.B \-Y
This specifies that an auxiliary dictionary will be built by the
compressor.  Each novel word found will be placed at the end of the
auxiliary dictionary.  Novel words will be coded in the compressed text
using a combination of gamma and binary codes.  The code represents
their occurrence position in the auxiliary dictionary.  This generally
produces better compression than
.B \-B
or
.BR \-D .
.TP
.B \-M
This specifies that an auxiliary dictionary will be built by the
compressor.  Each novel word found will be placed at the end of the
auxiliary dictionary.  Novel words will be coded in the compressed text
using a combination of gamma and binary codes.  The code represents
their occurrence position in the auxiliary dictionary.  This method is
adaptive within documents, and generally produces better compression
than
.BR \-B ,
.B \-D
or
.BR \-Y .
.TP
.BI \-l " lookback"
The generated dictionary is designed to be front coded when it is
loaded into memory.  Under normal circumstances, a front-coded
dictionary would require scanning from the beginning in order to find
any particular word.  However, every
.I lookback
words in the dictionary, the whole word is stored and a pointer to that
word maintained.  E.g., if
.I lookback
is 4, then every fourth word is stored in its entirety.
.TP
.BI \-k " mem"
This limits the amount of memory to use for the generated
dictionary.  Words are selected for the dictionary based of the text
statistics, and whether
.BR \-0 , " \-1" , " \-2"
or
.B \-3
is specified.  The memory is calculated assuming a lookback of 0,
irrespective of what actual lookback is specified.  This means that if
a non-zero lookback is given, the dictionary will actually occupy
less space than specified by
.BR \-k .
.TP
.BI \-d " directory"
This specifies the directory where the document collection can be found.
.TP
.BI \-f " name"
This specifies the base name of the document collection.
.SH ENVIRONMENT
.TP "\w'\fBMGDATA\fP'u+2n"
.SB MGDATA
If this environment variable exists, then its value is used as the
default directory where the
.BR mg (1)
collection files are.  If this variable does not exist, then the
directory \*(lq\fB.\fP\*(rq is used by default.  The command line
option
.BI \-d " directory"
overrides the directory in
.BR MGDATA .
.SH FILES
.TP 20
.B *.text.stats
Statistics about the source text.
.TP
.B *.text.dict
Compression dictionary for the source text.
.SH "SEE ALSO"
.na
.BR mg (1),
.BR mg_fast_comp_dict (1),
.BR mg_get (1),
.BR mg_invf_dict (1),
.BR mg_invf_dump (1),
.BR mg_invf_rebuild (1),
.BR mg_passes (1),
.BR mg_perf_hash_build (1),
.BR mg_text_estimate (1),
.BR mg_weights_build (1),
.BR mgbilevel (1),
.BR mgbuild (1),
.BR mgdictlist (1),
.BR mgfelics (1),
.BR mgquery (1),
.BR mgstat (1),
.BR mgtic (1),
.BR mgticbuild (1),
.BR mgticdump (1),
.BR mgticprune (1),
.BR mgticstat (1).
@


1.4
log
@*** empty log message ***
@
text
@d6 22
a27 6
.RB [ \-h ]
.RB [ \-C " | " \-P " | " \-S]
.RB [ \-0 " | " \-1 " | "
.BR \-2 " | " \-3 ]
.RB [ \-H " | " \-B " | "
.BR \-D " | " \-Y " | " \-M]
d30 9
a38 6
.RB [ \-l
.IR lookback ]
.RB [ \-k
.IR mem ]
.RB [ \-d
.IR directory ]
a48 1
.PP
d190 1
@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
.RB [ \-0 " | " \-1 " | " 
d10 1
a10 1
.RB [ \-H " | " \-B " | " 
@


1.2
log
@Correct spelling errors.
@
text
@d1 1
a1 1
.TH mg_compression_dict 1 "31 January 1994"
a4 1

d7 7
a13 3
.RB [ \-C | \-P | \-S\fP]
.RB [ \-0 | \-1 | \-2\fP|\fB\-3\fP]
.RB [ \-H | \-B | \-D\fP|\fB\-Y\fP|\fB\-M\fP]
d18 1
a18 1
.RB [ \-d 
a20 1

a21 1
.LP
d23 5
a27 1
builds a compression dictionary based on the statistics gathered during the first pass over the text. The options to the program are mainly concerned with limiting the amount of memory the dictionary will use and with how the text compressor will cope with any novel words found during the compression phase. 
a28 1
.LP
d30 2
a31 2
.RS
.TP
d33 2
a34 1
This displays a usage line on the screen.
d37 3
a39 1
Build a complete dictionary from the statistics file. If during the text compression phase a novel word is found then the compressor will produce an error message and stop.
d42 7
a48 1
Build a partial dictionary from the statistics file. This dictionary assumes that the statistics file are based on the entire text. The statistics of words not includes in the dictionary are used to calculate the escape probability. If novel words are being coded character by character then there may not be a huffman code for every possible character. This means that the compressor may fail if a novel word contains a novel character.
d51 6
a56 1
Build a seed dictionary form the statistics file. This dictionary assumes that the statistics file is based on only a portion of the text to be compressed. The probability of a novel word is based on the number of words that have only occurred once. If novel words are being coded character by character then the huffman codes for characters are based on the frequency of characters in the dictionary.
d59 2
a60 1
All words from the statistics file are included in the built dictionary.
d63 3
a65 1
Words are included in the dictionary until the dictionary reaches the desired size. Words are selected for the dictionary based on the order they occurred in the source text.
d68 4
a71 1
Words are included in the dictionary until the dictionary reaches the desired size. The most frequent words are included in the dictionary first, where there is a tie for frequency the shortest word is included first.
d74 6
a79 1
Words are included in the dictionary until the dictionary reaches the desired size. The most frequent words are included in the dictionary first, where there is a tie for frequency the shortest word is included first. Words are the shuffled back and forth between the 'keep' and 'discard' lists to find the 'optimal' set of words that should be in the dictionary.
d82 2
a83 1
This specifies that novel words will be coded character by character using huffman codes.
d86 5
a90 1
This specifies that an auxiliary dictionary will be built by the compressor. Each novel word found will be placed at the end of the auxiliary dictionary. Novel words will be coded in the compressed text using binary codes. The binary code represents their occurrence position in the auxiliary dictionary.
d93 5
a97 1
This specifies that an auxiliary dictionary will be built by the compressor. Each novel word found will be placed at the end of the auxiliary dictionary. Novel words will be coded in the compressed text using delta codes. The delta code represents their occurrence position in the auxiliary dictionary.
d100 6
a105 1
This specifies that an auxiliary dictionary will be built by the compressor. Each novel word found will be placed at the end of the auxiliary dictionary. Novel words will be coded in the compressed text using a combination of gamma and binary codes. The code represents their occurrence position in the auxiliary dictionary. This generally produces better compression than
d111 7
a117 1
This specifies that an auxiliary dictionary will be built by the compressor. Each novel word found will be placed at the end of the auxiliary dictionary. Novel words will be coded in the compressed text using a combination of gamma and binary codes. The code represents their occurrence position in the auxiliary dictionary. This method is adaptive within documents, and generally produces better compression than
d124 9
a132 5
The generated dictionary is designed to be front coded when it is loaded into memory. Under normal circumstances a front coded dictionary would require scanning from the beginning in order to find any particular word. However every
.B lookback
words in the dictionary the whole word is stored and a pointer to that word maintained. E.G. If 
.B lookback
is 4 then every fourth word is stored in its entirety.
d135 4
a138 2
This limits the amount of memory to use for the generated dictionary. Words are selected for the dictionary based of the text statistics and whether 
.BR -0 , " -1" , " -2"
d140 6
a145 3
.B -3
is specified. The memory is calculated assuming a lookback of 0 irrespective of what actual lookback is specified. This means that if a non-zero lookback is specified the dictionary will actually occupy less space than specified by 
.B \-k.
d153 1
a153 1
.TP
d155 6
a160 4
If this environment variable exists then its value is used a the default 
directory where the mg collection files are. If this variable does not exist
then the directory \*(lq\fB.\fP\*(rq is used by default. The command line 
option 
d162 1
a162 1
overrides the directory in 
a164 1
.PD 0
d172 2
a173 1
.LP
a177 1
.BR mg_make_fast_dict (1),
d192 1
a192 1
.BR mgticstat (1)
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
Words are included in the dictionary until the dictionary reaches the desired size. Words are selected for the dictionary based on the order they occured in the source text.
@
